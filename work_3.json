{
	"info": {
		"_postman_id": "3d26cf3c-3988-4331-b5f4-8ba12fe7dd73",
		"name": "work_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"token\", jsonData.token);",
							"  ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Alona",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Alek3a",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							" var req = JSON.parse(pm.request.body);",
							"var jsonData = pm.response.json();",
							"",
							"//Проверка структуры json в ответе.",
							"const schema = {\"person\": {",
							"\"u_age\": \"integer\",",
							"\"u_name\": [\"string\", \"integer\" , \"integer\"],",
							"\"u_salary_1_5_year\": \"integer\"},",
							"\"qa_salary_after_12_months\": \"integer\",",
							"\"qa_salary_after_6_months\": \"integer\",",
							"\"start_qa_salary\": \"integer\"} ",
							"pm.test(\"Validation structure\", () => {pm.response.to.have.jsonSchema(schema);});",
							"",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"pm.test(\"Your test salary_6\", function () {",
							"    pm.expect(+(jsonData.qa_salary_after_6_months)).to.eql(req.salary*2);});",
							"pm.test(\"Your test salary_12\", function () {",
							"    pm.expect(+(jsonData.qa_salary_after_12_months)).to.eql(req.salary*2.9);});",
							"pm.test(\"Your test salary_1_5\", function () {",
							"    pm.expect(+(jsonData.person.u_salary_1_5_year)).to.eql(req.salary*4);}); ",
							"    ",
							"//Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);",
							"pm.sendRequest({",
							"    url: \"http://162.55.220.72:5005/get_test_user\",",
							"    method: \"POST\",",
							"    header: { \"Content-Type\": \"multipart/form-data\" },",
							"    body: {",
							"        mode: \"formdata\",",
							"        formdata: [",
							"            { key: \"auth_token\", value: pm.environment.get(\"token\"), disabled: false}, {key: \"salary\", value: pm.environment.get(\"u_salary_1_5_year\"), disabled: false}, {key: \"age\", value: \"33\", disabled: false}, {key: \"name\", value: \"Alona\", disabled: false} ",
							"            ]",
							"    }",
							"    }, function (err, response) {",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"age\": 33,\n\"salary\": 500,\n\"name\": \"Alona\",\n\"auth_token\": \"{{token}}\"}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"// Статус код 200 ",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Проверка структуры json в ответе.",
							"const schema = {",
							"\"age\": \"integer\",",
							"\"name\": \"string\",",
							"\"salary\": [\"integer\",\"string\", \"string\"]}",
							"pm.test(\"Validation structure\", () => {pm.response.to.have.jsonSchema(schema);});",
							"",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"pm.test(\"salary\", function () {",
							"    pm.expect(jsonData.salary[0]).to.eql(500);",
							"});",
							"pm.test(\"salary*2\", function () {",
							"    pm.expect(jsonData.salary[1]).to.eql(\"1000\");",
							"});",
							"pm.test(\"salary*3\", function () {",
							"    pm.expect(jsonData.salary[2]).to.eql(\"1500\");",
							"});",
							"",
							"//Проверить, что 2-й элемент массива salary больше 1-го и 0-го ",
							"var a = jsonData.salary[0];",
							"var b = jsonData.salary[1];",
							"var c = jsonData.salary[2];",
							"",
							"pm.test(\"c > a\", function () {",
							"    pm.expect(c > a).to.eql(true);",
							"});",
							"pm.test(\"c > b\", function () {",
							"    pm.expect(c > b).to.eql(true);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alona",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" var jsonData = pm.response.json();",
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Проверка структуры json в ответе.",
							"const schema = {",
							"\"age\": \"integer\",",
							"\"daily_food\": \"weight\"*\"integer\",",
							"\"daily_sleep\": \"weight\"*\"integer\"}",
							"pm.test(\"Validation structure\", () => {pm.response.to.have.jsonSchema(schema);});",
							"",
							"//В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"var req = request.data;",
							"pm.test(\"Your test daily_food\", function () {",
							"    pm.expect(jsonData.daily_food).to.eql(req.weight*0.012);",
							"});",
							"pm.test(\"Your test daily_sleep\", function () {",
							"    pm.expect(jsonData.daily_sleep).to.eql(req.weight*2.5);});",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "70",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alona",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"var req = request.data;",
							"//Проверка структуры json в ответе.",
							"const schema = ",
							"{\"age\": \"integer\",",
							"\"family\": {\"children\": [[\"name\",\"integer\"],[\"name\",\"integer\"]],",
							"\"u_salary_1_5_year\": \"integer\"},",
							"\"name\": \"string\",",
							"\"salary\": \"integer\"}",
							"pm.test(\"Validation structure\", () => {pm.response.to.have.jsonSchema(schema);});",
							"//Проверить что значение поля name = значению переменной name из окружения",
							"pm.test(\"Name environment\", function (){",
							"    pm.expect(jsonData.name).to.eql(environment.name);",
							"});",
							"//Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age",
							"pm.test(\"Your test age\", function () {",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alona",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Можете взять любой объект из присланного списка, используйте js random",
							" var jsonData = pm.response.json();",
							"",
							"var random = jsonData[Math.floor(Math.random()*jsonData.length)];",
							"console.log (random);",
							"pm.environment.set (\"Cur_ID\", random.Cur_ID);",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.",
							"pm.environment.set (\"Cur_ID\", random.Cur_ID);",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Проверка структуры json в ответе.",
							"const schema = { ",
							"    \"Cur_Abbreviation\": \"NPR\",",
							"    \"Cur_ID\": 486,",
							"    \"Cur_Name\": \"Непальских рупий\",",
							"    \"Cur_OfficialRate\": 2.022,",
							"    \"Cur_Scale\": 100,",
							"    \"Date\": \"2021-11-25T00:00:00\"} ",
							"pm.test(\"Validation structure\", () => {pm.response.to.have.jsonSchema(schema);});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}