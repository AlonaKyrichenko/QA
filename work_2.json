{
	"info": {
		"_postman_id": "f184caef-0aeb-49d5-a0db-e9f5493370f8",
		"name": "work_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Проверить, что в body приходит правильный string",
							"pm.test(\"first\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var jsonData = pm.response.json();",
							" var req = request.data;",
							" ",
							"//Проверить, что name в ответе равно name s request",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Alona\");",
							"});",
							"//Проверить, что age в ответе равно age s request",
							"pm.test(\"Your test age\", function () {",
							"    pm.expect(+(jsonData.age)).to.eql(33);",
							"});",
							"//Проверить, что salary в ответе равно salary s request",
							"pm.test(\"Your test salary\", function () {",
							"    pm.expect(+(jsonData.salary)).to.eql(500);",
							"});",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"//Проверить, что age в ответе равно age s request (age забрать из request)",
							"pm.test(\"Your test age\", function () {",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"});",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Your test salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(+(req.salary));",
							"});",
							"// Вывести в консоль параметр family из response.",
							"console.log(jsonData.family);",
							" //Проверить что u_salary_1_5_year в ответе равно salary*4 ",
							"  pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alona",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Спарсить response body в json",
							"var jsonData = pm.response.json();",
							"//Спарсить request",
							"var req = pm.request.url.query.toObject()",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Your test age\", function () {",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"});",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Your test salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(+(req.salary));",
							"});",
							"",
							"//Вывести в консоль параметр family из response.",
							"console.log(jsonData.family);",
							"",
							"//Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog has name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");});",
							"//Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog has age\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");});",
							"//Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Dog name\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"//Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Dog age\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alona",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Alona&age=33&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alona"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"//Спарсить request.",
							"var req = pm.request.url.query.toObject()",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Your test age\", function () {",
							"    pm.expect(jsonData.age).to.eql(+(req.age));",
							"});",
							"//Вывести в консоль параметр salary из request.",
							"console.log(req.salary);",
							"//Вывести в консоль параметр salary из response",
							"console.log(jsonData.salary);",
							"//Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(jsonData.salary[0]);",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response",
							"console.log(jsonData.salary[1]);",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[2]);",
							"// Проверить, что 0-й элемент параметра salary равен salary из request ",
							"pm.test(\"Your salary\", function () {",
							"    pm.expect(jsonData.salary[0]).to.eql(+(req.salary));",
							"});",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request",
							"pm.test(\"Your salary_2\", function () {",
							"    pm.expect(+(jsonData.salary[1])).to.eql(req.salary*2);",
							"});",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request",
							"pm.test(\"Your salary_3\", function () {",
							"    pm.expect(+(jsonData.salary[2])).to.eql(req.salary*3);",
							"});",
							"//Создать в окружении переменную name",
							"pm.environment.set(\"name\", jsonData.name);",
							"// Создать в окружении переменную age",
							"pm.environment.set(\"age\", jsonData.age);",
							"//Создать в окружении переменную salary",
							"pm.environment.set(\"salary\", jsonData.salary[0]);",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"var json_resp = JSON.parse(responseBody);",
							"var salary = json_resp.salary",
							"",
							"for (var i=0; i < salary.length; i++){",
							"    console.log(\"Salary_\" + i +\":\" +salary[i])}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Alona&age=33&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alona"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Спарсить response body в json",
							"var jsonData = pm.response.json();",
							"// Спарсить request.",
							" var req = request.data;",
							" //Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Start_qa_salary\", function () {",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");});",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Qa_salary_6_\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");});",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Qa_salary_12_\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");});",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Qa_salary_1.5_\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");});",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Qa_salary_3.5_\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");});",
							"//Проверить, что json response имеет параметр person",
							"pm.test(\"Person\", function () {",
							"    pm.expect(jsonData).to.have.property(\"person\");});",
							"//Проверить, что параметр start_qa_salary равен salary из request",
							"pm.test(\"start_qa_salary\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+(req.salary));",
							"});",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request ",
							"pm.test(\"qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+(req.salary*2));",
							"});",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request",
							"pm.test(\"qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+(req.salary*2.7));",
							"});",
							" //Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request ",
							" pm.test(\"qa_salary_after_1_5\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+(req.salary*3.3));",
							"});",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request ",
							" pm.test(\"qa_salary_after_3_5\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+(req.salary*3.8));",
							"});",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request",
							" pm.test(\"1_element\", function () {",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+(req.salary));",
							"});",
							"//Проверить, что что параметр u_age равен age из request ",
							" pm.test(\"u_age\", function () {",
							"    pm.expect(jsonData.person.u_age).to.eql(+(req.age));",
							"});",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request",
							" pm.test(\"u_salary_5_years\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+(req.salary*4.2));",
							"});",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"var person = {",
							"        \"u_age\": 33,",
							"        \"u_name\": [",
							"            \"Alona\",",
							"            500,",
							"            33",
							"        ],",
							"        \"u_salary_5_years\": 2100.0",
							"    };",
							"for (var prop in person) {",
							"  console.log(prop + \": \" + person[prop]);",
							"};",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}